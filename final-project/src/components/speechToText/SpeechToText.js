import React, { useEffect, useState } from "react";
import SpeechRecognition, {
  useSpeechRecognition,
} from "react-speech-recognition";
import "./speechToText.css";
import "bootstrap";

//from documentation on https://www.npmjs.com/package/react-speech-recognition#basic-example
//useSpeechRecognition is a React hook that gives a component access to a transcript of speech picked up from the user's microphone.
//resetTranscript is part of the "react-speech-recognition" as is 'transcript', 'listening' and 'browserSupportsSpeechRecognition'
const SpeechToText = ({ label, setAttribute, userPrompt, setAPIKey }) => {
  const [localAPIKey, setLocalAPIKey] = useState("");
  const {
    transcript,
    listening,
    resetTranscript,
    browserSupportsSpeechRecognition,
  } = useSpeechRecognition();
  if (!browserSupportsSpeechRecognition) {
    return <span>Browser doesn't support speech recognition.</span>;
  }

  //when called this function stops the speech recogniton, AI image can then be generated by pressing 'create the magic!'
  const stop = () => {
    SpeechRecognition.stopListening();
    setAttribute(transcript);
  };

  const typeInput = (e) => {
    setAttribute(e.target.value);
  };

  function getUserAPIKey(e) {
    let userAPIKey = e.target.value;

    console.log(userAPIKey);
    setLocalAPIKey(userAPIKey);
  }

  function saveAPIKey() {
    setAPIKey(localAPIKey);
  }

  return (
    <div>
      
      <div className="howToUseDiv flex">
        <div className="aboutDiv">
          <h1>How to use:</h1>
          <div>
            This app will take audio prompts and use these to generate an AI
            image using openAI (Dall-E).
          </div>
          <div>
            First you will need to create an account and get an API key from
            openAI{" "}
          </div>
          <a className="anchorTag" href="https://platform.openai.com/">
            {" "}
            === OpenAi ===
          </a>
          <div>
            Once your API key is entered, press start to begin recording and
            stop to end your input.
          </div>
          <div>
            You can then edit the text transcription of your audio at the bottom
            of the page.
          </div>
          <div>
            Alternatively you can enter your input directly into the bottom
            field.
          </div>
          <div> Finally, press 'Create the magic!'</div>
        </div>
      </div>

      <div className="transcriptBox">
        <p>Enter your API key here:</p>
        <input
          type="password"
          // className="APIinputBox"
          id="userAPIKey"
          onChange={getUserAPIKey}
          value={localAPIKey}
          className="textBox flex"
        />
        <br></br>
        <button id="APIKeyButton" className="my-btn" onClick={saveAPIKey}>
          {" "}
          Click here to submit your API key!{" "}
        </button>
      </div>

      <div className="micBox">
        <p>
          Microphone: <span> {listening ? "on" : "off"} </span>
        </p>

        <button className="my-btn" onClick={SpeechRecognition.startListening}>
          <i className="fa-sharp fa-solid fa-microphone"></i> Start
        </button>
        <button className="my-btn" onClick={stop}>
          <i className="fa-sharp fa-solid fa-microphone-slash"></i> Stop
        </button>
        <button className="my-btn" onClick={resetTranscript}>
          <i className="fa-solid fa-trash-can"></i> Reset
        </button>

        <p>Audio Text Output:</p>
        <p className="transcriptOutput flex"> {transcript}</p>
        <p>
          Enter your prompt here OR edit the output from the audio transcript:
        </p>
        <input
          className="textBox flex"
          onChange={typeInput}
          value={userPrompt}
        />
      </div>
    </div>
  );
};

export default SpeechToText;
